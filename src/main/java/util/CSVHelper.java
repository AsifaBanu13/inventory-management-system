package util;

import Models.Product;
import exception.ValidationException;

import java.io.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

public class CSVHelper {

    private static final String REPORT_DIR = "reports";  // Folder for reports
    private static final String FILE_NAME = "products.csv";

    // Save products (overwrites base CSV)
    public static void saveProducts(List<Product> products) throws IOException {
        try (PrintWriter writer = new PrintWriter(new FileWriter(FILE_NAME))) {
            writer.println("ID,Name,Category,Quantity,Price");
            for (Product p : products) {
                String name = p.getName().replace(",", " ");
                String category = p.getCategory().replace(",", " ");
                writer.println(p.getId() + "," + name + "," + category + "," + p.getQuantity() + "," + p.getPrice());
            }
        }
    }

    // Load products from base CSV
    public static List<Product> loadProducts() throws IOException {
        List<Product> products = new java.util.ArrayList<>();
        File file = new File(FILE_NAME);
        if (!file.exists()) return products;

        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            String line;
            boolean firstLine = true;
            while ((line = br.readLine()) != null) {
                if (firstLine) {
                    firstLine = false;
                    continue;
                }

                String[] parts = line.split(",", -1);
                if (parts.length < 5) continue;

                try {
                    int id = Integer.parseInt(parts[0].trim());
                    String name = parts[1].trim();
                    String category = parts[2].trim();
                    int quantity = Integer.parseInt(parts[3].trim());
                    double price = Double.parseDouble(parts[4].trim());

                    if (!name.matches(".*[a-zA-Z].*")) {
                        throw new ValidationException("Invalid product name: " + name);
                    }
                    if (!category.matches(".*[a-zA-Z].*")) {
                        throw new ValidationException("Invalid category: " + category);
                    }

                    products.add(new Product(id, name, category, quantity, price));

                } catch (Exception e) {
                    System.err.println("Skipping invalid line: " + line);
                }
            }
        }

        return products;
    }

    // ✅ Generate report file in 'reports' folder
    public static String saveProductsReport(List<Product> products, String generatedBy) {
        try {
            File dir = new File(REPORT_DIR);
            if (!dir.exists()) dir.mkdirs();

            String fileName = REPORT_DIR + "/inventory_report_" +
                    new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date()) + ".csv";

            try (PrintWriter writer = new PrintWriter(new FileWriter(fileName))) {
                writer.println("=== Inventory Report ===");
                writer.println("Generated By: " + generatedBy);
                writer.println("Generated On: " +
                        new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()));
                writer.println("------------------------------------------------------------");
                writer.println("ID,Name,Category,Quantity,Price");

                if (products != null && !products.isEmpty()) {
                    for (Product p : products) {
                        writer.println(p.getId() + "," + p.getName() + "," + p.getCategory() + "," + p.getQuantity() + "," + p.getPrice());
                    }
                } else {
                    writer.println("⚠ No products available");
                }

                writer.println("------------------------------------------------------------");
                writer.println("Total Products: " + (products != null ? products.size() : 0));
            }

            System.out.println("✅ Report generated successfully: " + fileName);
            return fileName;

        } catch (IOException e) {
            System.err.println("❌ Error generating report: " + e.getMessage());
            return null;
        }
    }
}
